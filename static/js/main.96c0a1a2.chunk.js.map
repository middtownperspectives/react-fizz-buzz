{"version":3,"sources":["components/display/display.module.scss","components/number-box/numberBox.module.css","components/number-box/numberBox.js","components/display/display.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NumberBox","props","className","NumberBoxCSS","numberBox","cssStyle","number","Display","num","i","toString","split","pop","push","key","displayCSS","BuzzHover","Grid","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,UAAY,2BAA2B,WAAW,4B,oBCAjGD,EAAOC,QAAU,CAAC,UAAY,+B,6NCUfC,EARG,SAAAC,GAChB,OACE,6BAASC,UAAS,UAAKC,IAAaC,UAAlB,YAA+BH,EAAMI,WACrD,+BAAKJ,EAAMK,OAAX,OCoBSC,E,uKAlBX,IAFA,IAAMC,EAAM,GAEHC,EAAI,EAAGA,GADN,IACcA,IAClBA,EAAI,IAAM,GAAKA,EAAI,KAAO,GAIc,MAAjCA,EAAEC,WAAWC,MAAM,IAAIC,MAHhCJ,EAAIK,KACF,kBAAC,EAAD,CAAWC,IAAKL,EAAGH,OAAO,OAAOD,SAAUU,IAAWC,aAOxDR,EAAIK,KAAK,kBAAC,EAAD,CAAWC,IAAKL,EAAGH,OAAQG,KAIxC,OAAO,yBAAKP,UAAWa,IAAWE,MAA3B,IAAmCT,EAAnC,S,GAlBWU,aCWPC,MAVf,WACE,OACE,0BAAMjB,UAAU,OACd,6BAASA,UAAU,QACjB,kBAAC,EAAD,SCGYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.96c0a1a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Grid\":\"display_Grid__2n48a\",\"BuzzHover\":\"display_BuzzHover__UuNN4\",\"hvr-buzz\":\"display_hvr-buzz__w3VB_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"numberBox\":\"numberBox_numberBox__KcH8l\"};","import React from \"react\";\nimport NumberBoxCSS from \"./numberBox.module.css\";\n\nconst NumberBox = props => {\n  return (\n    <article className={`${NumberBoxCSS.numberBox} ${props.cssStyle}`}>\n      <p> {props.number} </p>\n    </article>\n  );\n};\n\nexport default NumberBox;\n","import React, { Component } from \"react\";\nimport displayCSS from \"./display.module.scss\";\nimport NumberBox from \"../number-box/numberBox\";\n\nclass Display extends Component {\n  render() {\n    const num = [];\n    const n = 100;\n    for (let i = 1; i <= n; i++) {\n      if (i % 7 === 0 || i % 11 === 0) {\n        num.push(\n          <NumberBox key={i} number=\"buzz\" cssStyle={displayCSS.BuzzHover} />\n        );\n      } else if (i.toString().split(\"\").pop() === \"7\") {\n        num.push(\n          <NumberBox key={i} number=\"buzz\" cssStyle={displayCSS.BuzzHover} />\n        );\n      } else {\n        num.push(<NumberBox key={i} number={i} />);\n      }\n    }\n\n    return <div className={displayCSS.Grid}> {num} </div>;\n  }\n}\n\nexport default Display;\n","import React from \"react\";\nimport \"./App.scss\";\n\nimport Display from \"./components/display/display\";\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <section className=\"page\">\n        <Display />\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}